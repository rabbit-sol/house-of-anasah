import { ConnectWallet, useAddress, useContract, useContractRead, useContractWrite, Web3Button } from "@thirdweb-dev/react";
import type { NextPage } from "next";
//import { Web3Button } from "../components/Web3Button/Web3Button";

import { useState, useEffect } from 'react'

import { config } from '../dapp.config'

import Header from "../components/Header";
import Footer from "../components/Footer";
import { utils } from 'ethers';

const signatureDropAddress = "0x1e66036bC884FB10b83f2688CFB04eCe1e7ECE6e";


const Mint: NextPage = () => {
    
    const address = useAddress();
     const [mint, setMint] = useState("Mint Now")

    const { contract } = useContract(signatureDropAddress);
    const { mutateAsync: PublicMint, } = useContractWrite(contract, "PublicMint")



    const [mintAmount, setMintAmount] = useState(1)
    const [maxMintAmount, setMaxMintAmount] = useState(2)
    const [mintPrice, setmintPrice] = useState(0)


    const [status, setStatus] = useState("")

    const { data: price, } = useContractRead(
        contract,
        'price',
    );













    const { data:whitelist, isLoading } = useContractRead(contract, "whitelist", address)
    const totalSupply = useContractRead(contract, "totalSupply")
    const nftMinted = totalSupply?.data;

    console.log(nftMinted)
    


   














     function myFunction() {
         const datas = whitelist;
           
        
        if (address && datas == false) {


            return (
                <>
                    <div style={{
                       
                       
                        fontSize: "1em",
                        height: "50px", minWidth: "200px"
                    }} className="pl-4 pr-4  flex items-center justify-center text-brand-background hover:shadow-lg bg-white font-bold rounded-md">Not Whitelisted</div>
                </>

            )
        }
        else if (address && datas == true) {
            return (
                <>
                  
                    <Web3Button
                        contractAddress={signatureDropAddress}
                        action={(contract) => {
                            contract.call('PublicMint', mintAmount, {
                                value: mintPrice,
                            });
                        }}
                        
                    >
                        Mint Now
                      
                    </Web3Button>
                     <Web3Button
                        contractAddress={signatureDropAddress}
                        action={(contract) => {
                            contract.call('PublicMint', mintAmount, {
                                value: price,
                            });
                        }}
                        
                    >
                        Mint{' '}
                      
                    </Web3Button>
                </>

            )
        }
        else {

            return (
                <>

                    <ConnectWallet colorMode="light" />
                </>

            )

        }


        }    
   

 


  
    const mintNft = async () => {
        try {
            const datas = await PublicMint([mintAmount]);
            setStatus("Congratulation! You have successfully Minted Ghostlers.");
            console.info("contract call successs", datas);
        } catch (e) {``
                //console.log(err.reason);
                setStatus(e.reason)
                //console.error("contract call failure", err.reason);
          
            
        }
    }



    useEffect(() => {
        const init = async () => {

        }

        init()
    }, [])

    const incrementMintAmount = () => {
        if (mintAmount < maxMintAmount) {
            setMintAmount(mintAmount + 1)
            setmintPrice(price * (mintAmount + 1))
        }
    }

    const decrementMintAmount = () => {
        if (mintAmount > 1) {
            setMintAmount(mintAmount - 1)
            setmintPrice(price * (mintAmount - 1))
        }
    }



    return (
        <div className="min-h-screen h-full w-full overflow-hidden flex flex-col items-center justify-center bg-brand-background ">
            <div className="relative w-full h-full flex flex-col items-center justify-center">
                <img
                    src="/images/hidden.png"
                    className="animate-pulse-slow absolute inset-auto block w-full h-screen object-cover"
                />

                <div className="flex flex-col items-center justify-center h-full w-full px-2 md:px-10">
                    <div className="relative z-1 md:max-w-3xl w-full bg-gray-900/90 filter backdrop-blur-sm py-4 rounded-md px-2 md:px-10 flex flex-col items-center">
                        <div className="absolute right-4 transition duration-200 ease-in-out font-chalk  px-4 py-2 rounded-md text-sm text-white tracking-wide uppercase">
                            <ConnectWallet colorMode="light" />
                        </div>
                       
                        <h1 className="font-coiny uppercase mt-6 font-bold text-3xl md:text-4xl bg-gradient-to-br mt-16 from-brand-green to-brand-blue bg-clip-text text-transparent mt-3">
                            Pre-Sale
                        </h1>


                        <div className="flex flex-col md:flex-row md:space-x-14 w-full mt-10 md:mt-14">
                            <div className="relative w-full">
                                <div className="font-coiny z-10 absolute top-2 left-2 opacity-80 filter backdrop-blur-lg text-base px-4 py-2 bg-black border border-brand-purple rounded-md flex items-center justify-center text-white font-semibold">
                                    <p>
                                        <span className="text-brand-pink">?/</span>{5555}
                                        
                                    </p>
                                </div>

                                <img
                                    src="https://ghostlers-io.vercel.app/config/images/example.gif"
                                    className="object-cover w-full sm:h-[280px] md:w-[250px] rounded-md"
                                />
                            </div>

                            <div className="flex flex-col items-center w-full px-4 mt-16 md:mt-0">
                                <div className="font-coiny flex items-center justify-between w-full">
                                    <button
                                        className="w-14 h-10 md:w-16 md:h-12 flex items-center justify-center text-brand-background hover:shadow-lg bg-gray-300 font-bold rounded-md"
                                        onClick={incrementMintAmount}
                                    >
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            className="h-6 w-6 md:h-8 md:w-8"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke="currentColor"
                                        >
                                            <path
                                                strokeLinecap="round"
                                                strokeLinejoin="round"
                                                strokeWidth={2}
                                                d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                                            />
                                        </svg>
                                    </button>

                                    <p className="flex items-center justify-center flex-1 grow text-center font-bold text-brand-pink text-3xl md:text-4xl">
                                        {mintAmount}
                                    </p>

                                    <button
                                        className="w-14 h-10 md:w-16 md:h-12 flex items-center justify-center text-brand-background hover:shadow-lg bg-gray-300 font-bold rounded-md"
                                        onClick={decrementMintAmount}
                                    >
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            className="h-6 w-6 md:h-8 md:w-8"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke="currentColor"
                                        >
                                            <path
                                                strokeLinecap="round"
                                                strokeLinejoin="round"
                                                strokeWidth={2}
                                                d="M18 12H6"
                                            />
                                        </svg>
                                    </button>
                                </div>

                                <p className="text-sm text-pink-200 tracking-widest mt-3">
                                    Max Mint Amount: 2
                                </p>

                                <div className="border-t border-b py-4 mt-16 w-full">
                                    <div className="w-full text-xl font-coiny flex items-center justify-between text-brand-yellow">
                                        <p>Total</p>

                                        <div className="flex items-center space-x-3">
                                            <p>
                                                {price
                                                    ? `(${price?.toString() === '0'
                                                        ? 'Free'
                                                        : `${utils.formatEther(price)*mintAmount} ETH`
                                                    })`
                                                    : ''}
                                            </p>{' '}
                                            <span className="text-gray-400">+ GAS</span>
                                        </div>
                                    </div>
                                </div>
                                <div className="mt-4">
                                {myFunction()}
                                
                            </div>
                            </div>
                        </div>

                       
                        <span className="font-coiny text-xl text-white uppercase mt-6">{status}</span>

                        {/* Contract Address */}
                        <div className="border-t border-gray-800 flex flex-col items-center mt-10 py-2 w-full">
                            <h3 className="font-coiny text-2xl text-brand-pink uppercase mt-6">
                                Contract Address
                            </h3>
                            <div className="App">
            <div className="col-container">
                <div className="col-side left">
                    <Question
                        color="#3ABFEF"
                        question="When can I register?"
                        answer="Registration will open in late summer and close several weeks before hackTAMS. Dates will be announced later."
                    ></Question>
                    <Question
                        color="#3ABFEF"
                        question="Another question here?"
                        answer="The answer goes here and should be a nice length but not too lengthy as to scare the reader into not wanting to read the rest."
                    ></Question>
                </div>
                <div className="col-side right">
                    <Question
                        color="#6270F0"
                        question="Am I eligible to attend?"
                        answer="To attend as a hacker, you need to be haogiha doihgaodiho sighaoshvxzoixvhozxhv aosifhasif"
                    ></Question>
                </div>
            </div>
        </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}


export default Mint;
